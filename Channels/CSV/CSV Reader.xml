<?xml version="1.0" encoding="UTF-8"?><channel version="3.9.1">
  <id>92b9b50f-d17c-46b7-a566-6c197f3f433f</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>CSV Reader</name>
  <description/>
  <revision>11</revision>
  <sourceConnector version="3.9.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.file.FileReceiverProperties" version="3.9.1">
      <pluginProperties/>
      <pollConnectorProperties version="3.9.1">
        <pollingType>INTERVAL</pollingType>
        <pollOnStart>true</pollOnStart>
        <pollingFrequency>5000</pollingFrequency>
        <pollingHour>0</pollingHour>
        <pollingMinute>0</pollingMinute>
        <cronJobs/>
        <pollConnectorPropertiesAdvanced>
          <weekly>true</weekly>
          <inactiveDays>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
            <boolean>false</boolean>
          </inactiveDays>
          <dayOfMonth>1</dayOfMonth>
          <allDay>true</allDay>
          <startingHour>8</startingHour>
          <startingMinute>0</startingMinute>
          <endingHour>17</endingHour>
          <endingMinute>0</endingMinute>
        </pollConnectorPropertiesAdvanced>
      </pollConnectorProperties>
      <sourceConnectorProperties version="3.9.1">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>false</respondAfterProcessing>
        <processBatch>true</processBatch>
        <firstResponse>true</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <scheme>FILE</scheme>
      <host>D:/Mirth_testing/Input</host>
      <fileFilter>*.csv</fileFilter>
      <regex>false</regex>
      <directoryRecursion>false</directoryRecursion>
      <ignoreDot>true</ignoreDot>
      <anonymous>true</anonymous>
      <username>anonymous</username>
      <password>anonymous</password>
      <timeout>10000</timeout>
      <secure>true</secure>
      <passive>true</passive>
      <validateConnection>true</validateConnection>
      <afterProcessingAction>MOVE</afterProcessingAction>
      <moveToDirectory>D:/Mirth_testing/Input/Processed</moveToDirectory>
      <moveToFileName>${channelName}_${SYSTIME}</moveToFileName>
      <errorReadingAction>NONE</errorReadingAction>
      <errorResponseAction>AFTER_PROCESSING</errorResponseAction>
      <errorMoveToDirectory/>
      <errorMoveToFileName/>
      <checkFileAge>true</checkFileAge>
      <fileAge>1000</fileAge>
      <fileSizeMinimum>0</fileSizeMinimum>
      <fileSizeMaximum/>
      <ignoreFileSizeMaximum>true</ignoreFileSizeMaximum>
      <sortBy>date</sortBy>
      <binary>false</binary>
      <charsetEncoding>DEFAULT_ENCODING</charsetEncoding>
    </properties>
    <transformer version="3.9.1">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
          <name>Filed Mapping</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>channelMap.put('CSV_FIELD_01', msg['row'][0]['column1']);  							
channelMap.put('CSV_FIELD_02', msg['row'][0]['column2']);		
channelMap.put('CSV_FIELD_03', msg['row'][0]['column3']);		
channelMap.put('CSV_FIELD_04', msg['row'][0]['column4']);
channelMap.put('CSV_FIELD_05', msg['row'][0]['column5']);
channelMap.put('CSV_FIELD_06', msg['row'][0]['column6']);
channelMap.put('CSV_FIELD_07', msg['row'][0]['column7']);
channelMap.put('CSV_FIELD_08', msg['row'][0]['column8']);
channelMap.put('CSV_FIELD_09', msg['row'][0]['column9']);
channelMap.put('CSV_FIELD_10', msg['row'][0]['column10']);
channelMap.put('CSV_FIELD_11', msg['row'][0]['column11']);
channelMap.put('CSV_FIELD_12', msg['row'][0]['column12']);
channelMap.put('CSV_FIELD_13', msg['row'][0]['column13']);
channelMap.put('CSV_FIELD_14', msg['row'][0]['column14']);
channelMap.put('CSV_FIELD_15', msg['row'][0]['column15']);
channelMap.put('CSV_FIELD_16', msg['row'][0]['column16']);
channelMap.put('CSV_FIELD_17', msg['row'][0]['column17']);
channelMap.put('CSV_FIELD_18', msg['row'][0]['column18']);
channelMap.put('CSV_FIELD_19', msg['row'][0]['column19']);
channelMap.put('CSV_FIELD_20', msg['row'][0]['column20']);
channelMap.put('CSV_FIELD_21', msg['row'][0]['column21']);
channelMap.put('CSV_FIELD_22', msg['row'][0]['column22']);
channelMap.put('CSV_FIELD_23', msg['row'][0]['column23']);
channelMap.put('CSV_FIELD_24', msg['row'][0]['column24']);
channelMap.put('CSV_FIELD_25', msg['row'][0]['column25']);
channelMap.put('CSV_FIELD_26', msg['row'][0]['column26']);
channelMap.put('CSV_FIELD_27', msg['row'][0]['column27']);
channelMap.put('CSV_FIELD_28', msg['row'][0]['column28']);
channelMap.put('CSV_FIELD_29', msg['row'][0]['column29']);
channelMap.put('CSV_FIELD_30', msg['row'][0]['column30']);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
          <name>Dec - to be move to Globals</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <script>channelMap.put('IMPORT_DATA', $('CSV_FIELD_01'));	
channelMap.put('DQ_URL', $('CSV_FIELD_02'));
channelMap.put('DQ_API', $('CSV_FIELD_03'));

//if($('IMPORT_DATA')== 'MEDICATION_IMPORT' || $('IMPORT_DATA') == 'EQUIPMENT_IMPORT'  ) 
//channelMap.put('JWT_TOKEN_PREM', 'DQ.jwtPerms='+$('CSV_FIELD_03')+';DQ.jwtToken='+$('CSV_FIELD_04'));
	


// Declaration - END POINTS
channelMap.put('AUTHURL_API', channelMap.get('DQ_URL')+'/auth/tokenForApiKey');
channelMap.put('USER_IMPORT_URL_API', channelMap.get('DQ_URL')+'/api/users/batch?tenant=1');
channelMap.put('CONTACT_IMPORT_URL_API', channelMap.get('DQ_URL')+'/api/contacts/contact'); //'?tenant=1'

channelMap.put('GET_SERVICE_URL_API', channelMap.get('DQ_URL')+'/api/services/service');
channelMap.put('GET_LOCATION_URL_API', channelMap.get('DQ_URL')+'/api/locations/location');

channelMap.put('MEDICATION_IMPORT_URL_API', channelMap.get('DQ_URL')+'/medications/api/medication');
channelMap.put('EQUIPMENT_IMPORT_URL_API', channelMap.get('DQ_URL')+'/medications/api/equipment');</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
          <name>Functions</name>
          <sequenceNumber>2</sequenceNumber>
          <enabled>true</enabled>
          <script>//------------------
function AUTH_TOKEN ()
{																									
	var debug = false; 
	if(debug) logger.info(' AUTH_TOKEN 03: '+ $('AUTHURL_API'));
	try{
	     var url = new java.net.URL($('AUTHURL_API'));														
	     if(debug) logger.info(' AUTH_TOKEN 08: '+ url);
	
	    // Open connection to url
	    var conn = url.openConnection();
		conn.setRequestMethod('POST');
		conn.setRequestProperty('Cache-Control', 'no-cache');
		conn.setRequestProperty('Content-Type', 'application/json');
	    conn.setDoOutput(true);
	    // Send request
	    var outStream = conn.getOutputStream();
	    var outWriter = new java.io.OutputStreamWriter(outStream);
	    outWriter.write('{ "apiKey": "'+$('DQ_API')+'" }');
	    outWriter.close();
	
	    //Capture Response
	    var respCode = conn.getResponseCode();
	    var inputStream = conn.getInputStream();
	    var streamReader = new java.io.InputStreamReader(inputStream);
	    var respStream = new java.io.BufferedReader(streamReader);												
	    if(debug) logger.info(' AUTH_TOKEN 23: '+ respStream);
	    var buffer = '';
	    var line = null;
	    while ((line = respStream.readLine()) != null) {
	        buffer = buffer + line;
	    }
	    respStream.close();

		var responseObject = JSON.parse(buffer.toString());													
		if(debug) logger.info('TOKEN: '+responseObject['token']);
		return responseObject['token'];
	}catch(e){
		return ('false');
	}
}

function IsServiceOrLocationValid(TYPE_ServiceOrLocation,ID_ServiceOrLocation)
{																									
	var debug = false;
	var ID_ =  validateRawData(ID_ServiceOrLocation,'ID');														
	if(debug) logger.info('ID: '+ ID_ServiceOrLocation);
	if (ID_ &lt; 1) return false;//null;
	
	var AUTH = AUTH_TOKEN ();																			
	if(debug) logger.info('AUTH: '+ AUTH);
	if (AUTH == 'false')return false;
	try{
		var url = new java.net.URL((TYPE_ServiceOrLocation == 'service')?channelMap.get('GET_SERVICE_URL_API'):channelMap.get('GET_LOCATION_URL_API')+'/' + ID_);
		var conn = url.openConnection();
		conn.setRequestMethod('GET');
		conn.setRequestProperty('Authorization', 'Bearer ' +  AUTH );//$('jwtToken')
		conn.setRequestProperty('Cache-Control', 'no-cache');
		conn.setRequestProperty('Content-Type', 'application/json');
						
		var inputStream = conn.getInputStream();
		var streamReader = new java.io.InputStreamReader(inputStream);
		var respStream = new java.io.BufferedReader(streamReader);
		
		var buffer = new java.lang.StringBuffer();
		var line = null;
		while ((line = respStream.readLine()) != null) {
		  buffer.append(line + '\n');
		}
		respStream.close();
		
		var responseObject = JSON.parse(buffer.toString()); 													
		if(debug) logger.info(responseObject['status']);
		//return responseObject;
		var IsFound = (responseObject['status'] !== '500');
		var LogUpdate = '';
		if (IsFound){
				LogUpdate = '';
			}else{
				LogUpdate = '';
		}
		return (IsFound);
	}catch(e){																						
		if(debug) logger.info('failed');
				LogUpdate = '';
		return (false); 		
	}
}

//channelMap.put('IS_SERVICE_VALID_AUTH_TOKEN',AUTH_TOKEN ());
//channelMap.put('IS_SERVICE_VALID',(IsServiceOrLocationValid('service',595)));
//--------------------------------
function validateRawData (obj,type)
{	
	var debug = false;
	if(debug) logger.info((obj)?obj.toString().trim():'empty object');
	if(type=='TEXT') return (obj)?obj.toString().trim():null;
	if(type=='ID'){
			var ID = null;
			if (obj &amp;&amp; !isNaN(obj)) {
				ID = new java.lang.Integer(obj.toString().trim()*1);
				ID = (ID &gt; 0 )?ID:null;
			}
			return ID;
	}
	if(type=='ID0'){
			var ID = null;
			if (obj &amp;&amp; !isNaN(obj)) {
				ID = new java.lang.Integer(obj.toString().trim()*1);
				ID = (ID &gt;= 0 )?ID:null;
			}
			return ID;
	}
	if(type=='DATE') { //  YYYY-MM-DD
		//logger.info(obj.toString().trim()); channelMap.put("01",obj.toString().trim());
		if (obj !== null){
				var PROVIDED_DATE = obj.toString().trim();
				var Y = PROVIDED_DATE.substr(0,4);//(6,4);
				var M = PROVIDED_DATE.substr(5,2);//(3,2);
				var D = PROVIDED_DATE.substr(8,2);//(0,2);
				//logger.info(obj.toString().trim()+', D:'+D+', M:'+M+', Y:'+Y); //channelMap.put("02",obj.toString().trim()+', D:'+D+', M:'+M+', Y:'+Y);
				if(D &gt; 0 &amp;&amp; D &lt; 32 &amp;&amp; M &gt; 0 &amp;&amp; M &lt; 13 &amp;&amp; Y &gt;= 1900) return Y+'-'+M+'-'+D;
		}
		return null;
	}
	if(type=='MULTIPLE_ID'){
		if (obj !== null){
				var MULTIPLE_ID = obj.toString().trim().split(";"); if(debug) logger.info('MULTIPLE_ID: '+MULTIPLE_ID);
				return (MULTIPLE_ID.length &gt; 0)?MULTIPLE_ID:null; logger.info('MULTIPLE_ID_LENGTH: '+MULTIPLE_ID.length);
		}
		return null;		
	}
}
/*
function validateRawData (obj,type)
{
																									var debug = false;
	if(type=='TEXT') return (obj)?obj.toString().trim():null;
	if(type=='ID') return (obj &amp;&amp; !isNaN(obj))?new java.lang.Integer(obj.toString().trim()*1):null;
	if(type=='DATE') { //  dd/mm/yyyy -&gt; YYYY-MM-DD
		//logger.info(obj.toString().trim());
		if (obj !== null){
				var PROVIDED_DATE = obj.toString().trim();
				var Y = PROVIDED_DATE.substr(6,4);
				var M = PROVIDED_DATE.substr(3,2);
				var D = PROVIDED_DATE.substr(0,2);
				//logger.info(obj.toString().trim()+', D:'+D+', M:'+M+', Y:'+Y);
				if(D &gt; 0 &amp;&amp; D &lt; 32 &amp;&amp; M &gt; 0 &amp;&amp; M &lt; 13 &amp;&amp; Y &gt; 1900) return Y+'-'+M+'-'+D;
		}
		return null;
	}
	if(type=='MULTIPLE_ID'){
		if (obj !== null){
				var MULTIPLE_ID = obj.toString().trim().split(",");  											if(debug) logger.info('validateRawData - MULTIPLE_ID:'+MULTIPLE_ID +' - count: '+MULTIPLE_ID.length);
				return (MULTIPLE_ID.length &gt; 0)?MULTIPLE_ID:null;
		}
		return null;		
	}
}
*/

function createMultiples (INPUT_ARRAY, INPUT_VARIABLE)
{ 																									
	var debug = true;
	$c('OUTPUT_ARRAY',[]);
 	if (INPUT_ARRAY== null) return null;																	
 	if(debug) logger.info('createMultiples 154: LENGTH:'+INPUT_ARRAY.length); //if(debug) 
	for (var i=0; i&lt; INPUT_ARRAY.length; i++){
		var CURRENT_VALUE =  INPUT_ARRAY[i];																
		if(debug) logger.info('createMultiples 107: '+ CURRENT_VALUE +" TYPE: "+INPUT_VARIABLE); //if(debug) 
		var ID_ =  CURRENT_VALUE; //validateRawData(CURRENT_VALUE,'ID');														if(debug) {logger.info('createMultiples 108: '+ ID_); logger.info('createMultiples 108_2: '+ INPUT_ARRAY[i]);}
		if (ID_ &gt; 0)
		{
			var tempT = {}
			tempT.id = CURRENT_VALUE;																	
			if(debug) logger.info('createMultiples 111: '+CURRENT_VALUE);
	
			if (INPUT_VARIABLE =='L' || INPUT_VARIABLE =='S')
			{
				var tempTL_S = {}
				if(INPUT_VARIABLE =='L')
				{
					//tempTL_S.location = INPUT_ARRAY[i];
					if (IsServiceOrLocationValid('location',CURRENT_VALUE)){ 									
						if(debug) logger.info('createMultiples-Loc-valid 119: '+CURRENT_VALUE);
							tempTL_S.location = CURRENT_VALUE;  $c('OUTPUT_ARRAY').push(tempTL_S);
						} else {
							channelMap.put('ERROR_LOCATIONS', channelMap.get('ERROR_LOCATIONS')+CURRENT_VALUE+",");	
							if(debug) logger.info('createMultiples-Loc-Invalid 122: '+channelMap.get('ERROR_LOCATIONS'));
						}
				}else{ 
					//tempTL_S.service = INPUT_ARRAY[i];
					if (IsServiceOrLocationValid('service',CURRENT_VALUE)){ 
						tempTL_S.service = CURRENT_VALUE; $c('OUTPUT_ARRAY').push(tempTL_S);						
						if(debug) logger.info('createMultiples-Ser-valid 127: '+CURRENT_VALUE);
						} else {
							channelMap.put('ERROR_SERVICES', channelMap.get('ERROR_SERVICES')+ CURRENT_VALUE+",");	
							if(debug) logger.info('createMultiples-Ser-Invalid 129: '+channelMap.get('ERROR_SERVICES'));
						}
				}
				
			}else{
				$c('OUTPUT_ARRAY').push(tempT);	
			}
		}else{ 
			//return null;
		}
	}
	return $c('OUTPUT_ARRAY');
}
//------------------



     function prepare_csv_field (InputString)
     {
     	return ((InputString.indexOf("'") &gt; -1 )?'"'+ InputString +'"':InputString)
     }






//channelMap.put('JSON_PAYLOAD', $('OUTPUT_PAYLOAD'));</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
          <name>Update Status Location_Service</name>
          <sequenceNumber>3</sequenceNumber>
          <enabled>true</enabled>
          <script/>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
          <name>Add, update or remove tag</name>
          <sequenceNumber>4</sequenceNumber>
          <enabled>true</enabled>
          <script>if (channelMap.get('IMPORT_DATA') == 'LOCATIONS_TAG_UPDATE' || channelMap.get('IMPORT_DATA') == 'SERVICES_TAG_UPDATE'){

	channelMap.put('TAG_UPDATE_LOCATIONS_SERVICES_API',  $('GET_LOCATION_URL_API'));	

	if (channelMap.get('IMPORT_DATA') == 'SERVICES_TAG_UPDATE')  channelMap.put('TAG_UPDATE_LOCATIONS_SERVICES_API',  $('GET_SERVICE_URL_API'));	
	if (channelMap.get('IMPORT_DATA') == 'LOCATIONS_TAG_UPDATE') channelMap.put('TAG_UPDATE_LOCATIONS_SERVICES_API',  $('GET_LOCATION_URL_API'));	

	var SERVICES_LOCATION_ID = validateRawData($('CSV_FIELD_04'),'ID');	channelMap.put('SERVICES_LOCATION_ID',  SERVICES_LOCATION_ID);	
	var TAG_ID = validateRawData($('CSV_FIELD_06'),'ID');
	var SERVICES_LOCATION_TAG  = (TAG_ID&gt;0)?TAG_ID:'[]';

	var OUTPUT_FILE_CONTENTS =	'"'+ msg['row'][0]['column1'] +'",'+ 
							 '"'+ msg['row'][0]['column2'] +'",'+ 
							 '"'+ msg['row'][0]['column3'] +'",'+ 
							 '"'+ msg['row'][0]['column4'] +'",'+ 
							 '"'+ msg['row'][0]['column5'] +'",'+ 
							 '"'+ msg['row'][0]['column6'] +'"';

	channelMap.put('JSON_PAYLOAD', '{"tags": '+SERVICES_LOCATION_TAG+'}');
	channelMap.put('OUTPUT_FILE_CONTENTS', OUTPUT_FILE_CONTENTS);

	
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
          <name>Delete Location</name>
          <sequenceNumber>5</sequenceNumber>
          <enabled>true</enabled>
          <script>if (channelMap.get('IMPORT_DATA') == 'LOCATIONS_DELETE' || channelMap.get('IMPORT_DATA') == 'SERVICES_DELETE'){

	if (channelMap.get('IMPORT_DATA') == 'SERVICES_DELETE')  channelMap.put('DELETE_LOCATION_SERVICE_API',  $('GET_SERVICE_URL_API'));	
	if (channelMap.get('IMPORT_DATA') == 'LOCATIONS_DELETE') channelMap.put('DELETE_LOCATION_SERVICE_API',  $('GET_LOCATION_URL_API'));	

	var SERVICES_LOCATION_ID = validateRawData($('CSV_FIELD_04'),'ID');	channelMap.put('SERVICES_LOCATION_ID',  SERVICES_LOCATION_ID);	
	var SERVICES_LOCATION_STATUS  = validateRawData($('CSV_FIELD_06'),'ID');

	var OUTPUT_FILE_CONTENTS =	'"'+ msg['row'][0]['column1'] +'",'+ 
							 '"'+ msg['row'][0]['column2'] +'",'+ 
							 '"'+ msg['row'][0]['column3'] +'",'+ 
							 '"'+ msg['row'][0]['column4'] +'",'+ 
							 '"'+ msg['row'][0]['column5'] +'",'+ 
							 '"'+ msg['row'][0]['column6'] +'"';

	channelMap.put('JSON_PAYLOAD', '{"status": '+SERVICES_LOCATION_STATUS+'}');
	channelMap.put('OUTPUT_FILE_CONTENTS', OUTPUT_FILE_CONTENTS);

	
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.9.1">
          <name>Add Location</name>
          <sequenceNumber>6</sequenceNumber>
          <enabled>true</enabled>
          <script>if (channelMap.get('IMPORT_DATA') == 'LOCATIONS_ADD'){
	channelMap.put('ADD_LOC_SER_API', $('GET_LOCATION_URL_API'));
}
if (channelMap.get('IMPORT_DATA') == 'SERVICES_ADD'){

	channelMap.put('ADD_LOC_SER_API', $('GET_SERVICE_URL_API'));	
}


	var REQUEST_DATA = {};
	    REQUEST_DATA.status = 0;
	    REQUEST_DATA.parent = 1;
	    REQUEST_DATA.tags = [];
	var FIRST_TRANSLATION = {};
	    FIRST_TRANSLATION.language = 1;
	    FIRST_TRANSLATION.value = "";
	var TRANSLATION = {};
	    TRANSLATION["1"]=FIRST_TRANSLATION;
	var TITLE  = {};
	    TITLE.translations  = TRANSLATION;
	    REQUEST_DATA.title = TITLE;
	    
	var MAX_LENGTH = 10, LOC_SER_ARRAY = [], x=0;

	var DEFAULT_PARENT_NODE = 1;
	var PROVIDED_PARENT_NODE = validateRawData($('CSV_FIELD_04'),'ID');

	logger.info('PROVIDED_PARENT_NODE --&gt;' +PROVIDED_PARENT_NODE);

	channelMap.put('LOC_SER_PARENT_NODE_BEFORE_CONV_01',$('CSV_FIELD_04'));
	channelMap.put('LOC_SER_PARENT_NODE_BEFORE_CONV_02',PROVIDED_PARENT_NODE);
	
	var LOC_SER_PARENT_NODE = (PROVIDED_PARENT_NODE &gt;0)?PROVIDED_PARENT_NODE:DEFAULT_PARENT_NODE;
	
	channelMap.put('LOC_SER_PARENT_NODE',LOC_SER_PARENT_NODE);

	for (i = 1; i &lt;= MAX_LENGTH; i++) {

			//channelMap.put('LOC_SER_ARRAY['+i+']',null);
			//channelMap.put('LOC_SER_OBJ['+i+']',null);
			 x = i+4;
			 var tempC = null
			 var tempA = validateRawData($('CSV_FIELD_'+((x&lt;10)?'0'+x:x)),'TEXT'); 
			
			logger.info('tempA--&gt;' +tempA);
			 
			if(tempA!==''){
			 var tempC =  REQUEST_DATA;$('CSV_FIELD_21')
			 tempC.title.translations["1"].value = tempA;
//		 logger.info('PREVIOUS_L0_ID--&gt;' +PREVIOUS_L0_ID);
				//----------------------------------------------------------------------------------------------------
				if(LOC_SER_PARENT_NODE == globalMap.get('PREVIOUS_L0_ID'))
				{
					//----------

					logger.info('PREVIOUS_L'+i+'_TEXT');
					
					var internal_A = (i==1)?(tempA == globalMap.get('PREVIOUS_L'+i+'_TEXT')):(internal_A &amp;&amp; tempA == globalMap.get('PREVIOUS_L'+i+'_TEXT'));

					
					if(internal_A){
						globalChannelMap.put('RESPONSE_DQ_L'+i+'_ID',globalMap.get('PREVIOUS_L'+i+'_ID'));
						globalChannelMap.put('internal_A_'+i,internal_A);
					}else{
						channelMap.put('LOC_SER_'+i,JSON.stringify(tempC));
					//	logger.info('LOC_SER_--&gt;' +LOC_SER_);
					}
					//---------
					
				}else{				
					channelMap.put('LOC_SER_'+i,JSON.stringify(tempC));	
				//	logger.info('LOC_SER_--&gt;' +LOC_SER_);				
				}
						 
			}

	}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"/>
      <outboundTemplate encoding="base64"/>
      <inboundDataType>DELIMITED</inboundDataType>
      <outboundDataType>XML</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDataTypeProperties" version="3.9.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedSerializationProperties" version="3.9.1">
          <columnDelimiter>,</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>"</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
          <numberedRows>false</numberedRows>
          <ignoreCR>true</ignoreCR>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedDeserializationProperties" version="3.9.1">
          <columnDelimiter>,</columnDelimiter>
          <recordDelimiter>\n</recordDelimiter>
          <quoteToken>"</quoteToken>
          <escapeWithDoubleQuote>true</escapeWithDoubleQuote>
          <quoteEscapeToken>\</quoteEscapeToken>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.delimited.DelimitedBatchProperties" version="3.9.1">
          <splitType>Record</splitType>
          <batchSkipRecords>1</batchSkipRecords>
          <batchMessageDelimiter/>
          <batchMessageDelimiterIncluded>true</batchMessageDelimiterIncluded>
          <batchGroupingColumn/>
          <batchScript/>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.9.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.9.1">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.9.1">
          <splitType>Element_Name</splitType>
          <elementName/>
          <level>1</level>
          <query/>
          <batchScript/>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.9.1">
      <elements/>
    </filter>
    <transportName>File Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.9.1">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.vm.VmDispatcherProperties" version="3.9.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.9.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable/>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <channelId>none</channelId>
        <channelTemplate>${message.encodedData}</channelTemplate>
        <mapVariables/>
      </properties>
      <transformer version="3.9.1">
        <elements/>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.9.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.9.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.9.1">
            <splitType>Element_Name</splitType>
            <elementName/>
            <level>1</level>
            <query/>
            <batchScript/>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript/>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.9.1">
        <elements/>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript/>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.9.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.9.1">
            <splitType>JavaScript</splitType>
            <batchScript/>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.9.1">
        <elements/>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as "Postprocessor" in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.9.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.9.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1686583406382</time>
        <timezone>Asia/Calcutta</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <dependentIds/>
    <dependencyIds/>
    <channelTags/>
  </exportData>
</channel>
